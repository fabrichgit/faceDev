// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blog {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  user      Users?  @relation(fields: [userId], references: [id])
  userId    String?
  tag       String?
  View      View[]
}

model View {
  id      String @id @default(cuid())
  blog    Blog   @relation(fields: [blogId], references: [id])
  blogId  String
  user    Users  @relation(fields: [usersId], references: [id])
  usersId String
}

model Users {
  id         String     @id @default(cuid())
  name       String     @unique
  email      String     @unique
  pseudo     String?    @unique
  proffesion String[]
  links      Json[]
  blog       Blog[]
  projects   Projects[]
  star       Star[]
  comment    Comment[]
  like       Like[]
  isAprouved Boolean    @default(false)
  password   String
  skill      Skill[]
  catalogue  String?
  View       View[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum CategoryProject {
  beginner
  intermediate
  ultimate
}

model Projects {
  id          String          @id @default(cuid())
  name        String          @unique
  description String
  category    CategoryProject
  language    String[]
  video       String?
  photos      String[]
  user        Users           @relation(fields: [userId], references: [id])
  userId      String
  star        Star[]
  comment     Comment[]
  tag         String?
  icon        String?
  skillItem   SkillItem?      @relation(fields: [skillItemId], references: [id])
  skillItemId String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  available   Boolean         @default(true)
  isFavorte   Boolean         @default(false)
}

model Star {
  id         String   @id @default(cuid())
  project    Projects @relation(fields: [projectsId], references: [id])
  projectsId String
  user       Users    @relation(fields: [userId], references: [id])
  userId     String
}

model Comment {
  id         String   @id @default(cuid())
  project    Projects @relation(fields: [projectsId], references: [id])
  projectsId String
  user       Users    @relation(fields: [userId], references: [id])
  userId     String
  content    String
  like       Like[]
}

model Like {
  id        String  @id @default(cuid())
  user      Users   @relation(fields: [userId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])
  userId    String
  commentId String
}

model Skill {
  id        String      @id @default(cuid())
  title     String
  rank      Float?
  user      Users       @relation(fields: [usersId], references: [id])
  usersId   String
  skillItem SkillItem[]
}

model SkillItem {
  id       String     @id @default(cuid())
  skill    Skill      @relation(fields: [skillId], references: [id])
  skillId  String
  item     String
  projects Projects[]
}
